1. Spring Boot Internals:

In spring boot starters we do have 'spring.factories' in each of the jar. This file contains list of beans related to that particular jar. In each of 
those class files, we have annotations for conditional beans loading.

Example:
@Configuration
@ConditionalOnBean(DataSource.class)
@ConditionalOnClass(JpaRepository.class)
@ConditionalOnMissingBean({ JpaRepositoryFactoryBean.class,
		JpaRepositoryConfigExtension.class })
@ConditionalOnProperty(prefix = "spring.data.jpa.repositories", name = "enabled", havingValue = "true", matchIfMissing = true)
@Import(JpaRepositoriesAutoConfigureRegistrar.class)
@AutoConfigureAfter(HibernateJpaAutoConfiguration.class)
public class JpaRepositoriesAutoConfiguration {
}
https://www.youtube.com/watch?v=qlygg_H1M20&ab_channel=JavaTechie

**********************

2. How to exclude few classes not to auto configure in Spring Boot.

a) using @EnableAutoConfiguration 

@Configuration
@EnableAutoConfiguration(exclude={DataSourceAutoConfiguration.class})
public class MyConfiguration {
}

b) in application.yml

spring:
  autoconfigure:
    exclude:
      - org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration
      - org.springframework.boot.actuate.autoconfigure.ManagementWebSecurityAutoConfiguration
      - org.springframework.boot.autoconfigure.security.FallbackWebSecurityAutoConfiguration
      
**********************

3. Spring boot annotations

https://www.youtube.com/watch?v=htyq-mER0AE&ab_channel=JavaTechie

**********************

4. Replace Tomcat with Jetty

Modify pom.xml as below

<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-web</artifactId>
    <exclusions>
        <exclusion>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-tomcat</artifactId>
        </exclusion>
    </exclusions>
</dependency>
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-jetty</artifactId>
</dependency>

https://howtodoinjava.com/spring-boot/configure-jetty-server/

**********************

5. JPARepository vs CRUDRepository
JPARepository is a combination of CRUDRepository & PagingAndSortingRepository. So we can get more features from JPARepository
Repository <- CRUDRepository
Repository <- CRUDRepository <- PagingAndSortingRepository <- JPARepository

https://www.geeksforgeeks.org/spring-boot-difference-between-crudrepository-and-jparepository/

**********************

6. Connecting to multiple data sources in spring boot.
https://www.youtube.com/watch?v=iDogrHEo4x0&ab_channel=JavaTechie
Example:
https://github.com/surasint/surasint-examples/tree/master/spring-boot-jdbi/10_spring-boot-two-databases

Step 1: Add multiple data source details in application.properties with diff prefixes
         spring.ds1.datasource.url = MySQLURL
         spring.ds2.datasource.url = OracleURL

Step 2: Create respective Entities & Repository classes.

Step 3: Create multiple Java config files with detailsm like DataSource, LocalContainerEntityManagerFactoryBean, PlatformTransactionManager. 
One must be the primary data source.

	DS1Config.java
		@Primary
		@Bean(name = "dataSource1")
		@ConfigurationProperties(prefix = "spring.ds1.datasource")
		public DataSource dataSource() {
			return DataSourceBuilder.create().build();
		}
		
	DS2Config.java
		@Bean(name = "dataSource2")
		@ConfigurationProperties(prefix = "spring.ds2.datasource")
		public DataSource dataSource() {
			return DataSourceBuilder.create().build();
		}

**********************

7. ChainedTransactionManager
https://stackoverflow.com/questions/30337582/spring-boot-configure-and-use-two-data-sources

If we want to commit/rollback both the transactions of diff datasources, we need this ChainedTransactionManager.

Step 1: We need to create a bean
@Bean(name = "chainedTransactionManager")
public ChainedTransactionManager getChainedTransactionManager(@Qualifier ("tm1") DataSourceTransactionManager tm1, @Qualifier ("tm2") DataSourceTransactionManager tm2){
    return new ChainedTransactionManager(tm1, tm2);
}

Step 2: We need to provide the above bean on the actual transaction.
@Transactional(value="chainedTransactionManager")
public void insertAll() {
    UserBean test = new UserBean();
    test.setUsername("username" + new Date().getTime());
    dao1.insert(test);
    dao2.insert(test);
}

**********************

8. Count words using streams

public class WordCount {
	public static void main(String[] args) {
		List<String> myList = Stream.of("Sachin", "Sehwag", "Dravid", "Sachin", "Ganguly").collect(Collectors.toList());
		Map<String, Long> wordCountMap = myList.stream().collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));
		System.out.println(wordCountMap);
	}
}
